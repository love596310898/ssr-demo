const fs = require('fs')
const path = require('path')
const express = require('express')
const compression = require('compression')
const resolve = file => path.resolve(__dirname, file)

const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

let renderer, MFS
if (isProd) {
  // In production: create server renderer using server bundle and index HTML
  // template from real fs.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // src/index.template.html is processed by html-webpack-plugin to inject
  // build assets and output as dist/index.html.
  const template = fs.readFileSync(resolve('./dist/index.html'), 'utf-8')
  renderer = createRenderer(bundle, template)
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  require('./build/setup-dev-server')(app, (bundle, template, mfs) => {
    renderer = createRenderer(bundle, template)
    console.log(mfs, '内存文件系统存储成功')
    MFS = mfs
  })
}

function createRenderer (bundle, template) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    template,
    clientManifest: isProd ? require('./dist/vue-ssr-client-manifest.json') : false,
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

app.use('/dist', function (req, res, next) {
  let url = req.url
  //var filePath = path.join(__dirname, `./dist${url}`)
  var filePath = path.join(__dirname, `/dist/dist/static/manifest.js`)
  console.log(filePath)
  let js = MFS.readFileSync(filePath, 'utf-8')
  console.log(js)
  res.send(js)
})

app.get('*', (req, res) => {
  if (!renderer) {
    return res.send('waiting for compilation... refresh in a moment.')
  }
  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)
  const context = {
    url: req.url,
    title: 'server'
  }
  renderer.renderToString(context, (err, html) => {
    if(err){
      res.send('Internal Server Error1')
    } else {
      res.send(html)
    }
  })
})

const port = process.env.PORT || 8080

app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
  console.log(`working path in ${path.resolve('.')}`)
})
